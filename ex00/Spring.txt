스프링 부트의 장점 : 

1.톰캣 같은 웹서버를 별도로 설치하지 않아도 된다.

2.빌드 + 서버 띄우기까지 가능

3.스타터 종속성 제공

4.스프링과 외부 라이브러리 자동 구성

5.프로덕션 준비 기능 제공



스프링 : 

자바 기반의 프레임워크 

DI 컨테이너 기술, 프레임워크, 부트, 스프링 프레임워크등을 모두 포함한 스프링 생태계

좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크


객체 지향 - 추상화, 상속화, 캡슐화, 다형성 

다형성 : 자동차 운전 방식을 알면 자동차 종이 바뀐다고 해도 운전은 가능함

K3 -> 아반떼 -> 자동차 역할(인터페이스)은 변하지 않음



역할 = 인터페이스, 구현 = 인터페이스를 구현한 클래스, 구현 객체

객체 설계시 역할과 구현을 명확하게 분리 

구현(아반떼)보다 인터페이스(자동차 운전방식)가 더 중요

자바 언어 : 오버라이딩(상속 관계에서 부모 클래스의 메서드를 자식 클래스에서 재정의)으로 다형성을 구현 

다형성의 본질 : 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.

SOLID : 좋은 객체 지향 설계의 5가지 원칙

SRP(단일 책임 원칙) : 한 클래스는 하나의 책임만 가져야 한다. 기준 : 변경(변경이 있을 때 파급 효과가 적으면 책임 원칙을 잘 따른 것)

OCP(개방-폐쇄 원칙) : 확장은 개방, 변경은 폐쇄... (개념 어려움)

LSP(리스코프 치환 원칙) : 인터페이스 규약을 지켜야함 ex) 자동차의 엑셀 기능 -> 반드시 앞으로 가야함. 뒤로 가면 X (위반)

ISP(인터페이스 분리 원칙) : 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다

DIP (의존관계 역전 원칙) : 역할에 의존해야함(클라이언트가 인터페이스에 의존), 구현에 의존하면 안된다. 



정리 : 객체 지향의 핵심은 다형성

다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.

다형성 만으로는 OCP, DIP를 지킬 수 없다.






 
